{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/quiet/source/css/index.less","path":"css/index.less","modified":0,"renderable":1},{"_id":"themes/quiet/source/image/favicon.ico","path":"image/favicon.ico","modified":0,"renderable":1},{"_id":"themes/quiet/source/image/logo.png","path":"image/logo.png","modified":0,"renderable":1},{"_id":"themes/quiet/source/image/pattern.png","path":"image/pattern.png","modified":0,"renderable":1},{"_id":"themes/quiet/source/js/fancybox-images.js","path":"js/fancybox-images.js","modified":0,"renderable":1},{"_id":"themes/quiet/source/js/fancybox.umd.js","path":"js/fancybox.umd.js","modified":0,"renderable":1},{"_id":"themes/quiet/source/js/gitalk.min.js","path":"js/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/quiet/source/js/gotop.js","path":"js/gotop.js","modified":0,"renderable":1},{"_id":"themes/quiet/source/js/hljs.min.js","path":"js/hljs.min.js","modified":0,"renderable":1},{"_id":"themes/quiet/source/js/index.js","path":"js/index.js","modified":0,"renderable":1},{"_id":"themes/quiet/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/highlight/atom-one-dark.less","path":"css/highlight/atom-one-dark.less","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/pages/about.less","path":"css/pages/about.less","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/pages/archive.less","path":"css/pages/archive.less","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/pages/categories.less","path":"css/pages/categories.less","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/pages/home.less","path":"css/pages/home.less","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/pages/links.less","path":"css/pages/links.less","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/pages/post.less","path":"css/pages/post.less","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/pages/tag.less","path":"css/pages/tag.less","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/pages/tags.less","path":"css/pages/tags.less","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/plugin/fancybox.css","path":"css/plugin/fancybox.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/plugin/gitalk.css","path":"css/plugin/gitalk.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/public/article_cente.less","path":"css/public/article_cente.less","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/public/color.less","path":"css/public/color.less","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/public/content.less","path":"css/public/content.less","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/public/header_background.less","path":"css/public/header_background.less","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/public/mixins.less","path":"css/public/mixins.less","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/widget/food.less","path":"css/widget/food.less","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/widget/grouping.less","path":"css/widget/grouping.less","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/widget/header.less","path":"css/widget/header.less","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/widget/header_body.less","path":"css/widget/header_body.less","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"ae1ea5bf3536a13404c4ea121c683d60f0a14667","modified":1677232324625},{"_id":"themes/quiet/.gitignore","hash":"38ac5c7450cf1e273ac3d0770fdd3c57f1d64dd4","modified":1677228324810},{"_id":"themes/quiet/LICENSE","hash":"b141d557809fd4804d6d828dfcaa5c4adb734bc7","modified":1677228324810},{"_id":"themes/quiet/README-EN.md","hash":"3e98348cfa6aef64fc44fa6b576966214732b6ae","modified":1677228324810},{"_id":"themes/quiet/README.md","hash":"a0994ded2dda0d1a8cb47c6e116fc717bb5de107","modified":1677228324810},{"_id":"themes/quiet/_config.yml","hash":"5148737b7ff103085a14d2831ac8ea727fcd4500","modified":1677232550205},{"_id":"themes/quiet/package.json","hash":"3463cf0f17af3e92ee76c7b04b7e114615cbcf59","modified":1677228324810},{"_id":"themes/quiet/layout/.DS_Store","hash":"de53c74a406aa37155b728f6c82083936ef12fe8","modified":1677228324810},{"_id":"themes/quiet/layout/404.ejs","hash":"462ae83c3bebb34bc8a48030f736add89a1ed135","modified":1677228324810},{"_id":"themes/quiet/layout/about.ejs","hash":"3089eb0e0c753ec1b0d8d064224b02b78d8f993f","modified":1677228324810},{"_id":"themes/quiet/layout/archive.ejs","hash":"e3451030d7bcc5468ead22d01164ed7072664d87","modified":1677228324810},{"_id":"themes/quiet/layout/categories.ejs","hash":"52896f6d60e7157e133d6692c3395dee892cf081","modified":1677228324810},{"_id":"themes/quiet/layout/index.ejs","hash":"2d1245d2b8d231e1306c4704a450977299e7318d","modified":1677228324810},{"_id":"themes/quiet/layout/layout.ejs","hash":"71156dbacfa705be0a1b27aa795509e3b1d7238b","modified":1677228324810},{"_id":"themes/quiet/layout/links.ejs","hash":"a2782c2816c33dc2e0365866374ccf1c5f8ae57f","modified":1677228324810},{"_id":"themes/quiet/layout/post.ejs","hash":"d934b6a6e1f8b42ec5b5e80c1beee62e42bce81a","modified":1677228324810},{"_id":"themes/quiet/layout/tag.ejs","hash":"9df2d4ab6334cb386a58eac7f65fb3e251a86250","modified":1677228324810},{"_id":"themes/quiet/layout/tags.ejs","hash":"a0c7e74f4de2a8201d8ef0fa1cb2d8c317846bb0","modified":1677228324810},{"_id":"themes/quiet/source/.DS_Store","hash":"0935ddd35f7d55208863a758e2b7aeff97406545","modified":1677228324810},{"_id":"themes/quiet/layout/_partial/.DS_Store","hash":"e0285051acc738d121129a2c9b00be1367d438a3","modified":1677228324810},{"_id":"themes/quiet/layout/_partial/foot.ejs","hash":"f7137f9c530d75efe51c50aef9decc9901dac85b","modified":1677228324810},{"_id":"themes/quiet/layout/_partial/head.ejs","hash":"8941ab8c53012c8ee6b56d229d6415458c360cd2","modified":1677229193840},{"_id":"themes/quiet/layout/_partial/header.ejs","hash":"2d0eb265df6def742cbcab6aca72ee98733bd8a0","modified":1677228324810},{"_id":"themes/quiet/layout/_partial/home.ejs","hash":"279895d8caf7df1c274a2bfa87867b504894d98c","modified":1677231269958},{"_id":"themes/quiet/layout/_partial/post_centent.ejs","hash":"c3cd12198ba8d86b2427c79b42f89ed73a127c6b","modified":1677228324810},{"_id":"themes/quiet/layout/_partial/post_head.ejs","hash":"324217741ac1a67cb7c853f4034eedc5b856a6c9","modified":1677228324810},{"_id":"themes/quiet/layout/_partial/post_paging.ejs","hash":"673965e84b2d23d4cca6bd822752b272260205e7","modified":1677228324810},{"_id":"themes/quiet/layout/_widget/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1677228324810},{"_id":"themes/quiet/layout/_widget/analytics.ejs","hash":"e6f5fea8a5e1642a569cfeaba24f74e68efd9e09","modified":1677228324810},{"_id":"themes/quiet/layout/_widget/comment.ejs","hash":"5beb387ed542f592336c47172cbf4e1aafc8fee1","modified":1677228324810},{"_id":"themes/quiet/layout/_widget/gotop.ejs","hash":"a894ee61bc45c29594ce59f72809fea5f2c55ae0","modified":1677228324810},{"_id":"themes/quiet/layout/_widget/grouping.ejs","hash":"370b5483e6092289ecba933f3a622936e39133d5","modified":1677228324810},{"_id":"themes/quiet/layout/_widget/header_body.ejs","hash":"e1498276e2c3962d8dc9f114ec51e97a8f2874d7","modified":1677228324810},{"_id":"themes/quiet/layout/_widget/sidebar.ejs","hash":"03fb90579100a1dbe4ec370ac5dc8770a81ec401","modified":1677228324810},{"_id":"themes/quiet/source/css/.DS_Store","hash":"75b22b6a020bdf7a452db2f4d29044b8a88a6661","modified":1677228324810},{"_id":"themes/quiet/source/css/index.less","hash":"5d9c79ae6a842fa2f74f74e7d6931cc509b75346","modified":1677228324810},{"_id":"themes/quiet/source/image/.DS_Store","hash":"3128ff56de5645c269da786b475fd357f1db7a5f","modified":1677228324810},{"_id":"themes/quiet/source/image/favicon.ico","hash":"fad2c16f133094e29f9c4aa8a946b7aa200ec98b","modified":1677228324810},{"_id":"themes/quiet/source/image/logo.png","hash":"3487c0299f2f69abc8bbbd5d7c61ad77b311c801","modified":1677228324810},{"_id":"themes/quiet/source/image/pattern.png","hash":"e9a79b9b5716c781e8f5acf3462e42fae7f39741","modified":1677228324810},{"_id":"themes/quiet/source/js/.DS_Store","hash":"5c85c7c09e8fb1060d46fb1a2c18bd26eb197785","modified":1677228324810},{"_id":"themes/quiet/source/js/fancybox-images.js","hash":"1eee6b143f944bce1dab2a9f2141435e545bc537","modified":1677228324810},{"_id":"themes/quiet/source/js/gotop.js","hash":"78f04d8833cf9916f71469fb80722004dce09b28","modified":1677228324814},{"_id":"themes/quiet/source/js/index.js","hash":"2023e077272d3bfbc8c02791b402b6cf5ce6b118","modified":1677228324814},{"_id":"themes/quiet/source/css/highlight/atom-one-dark.less","hash":"2e77891a36adb367984ee7c2776059120303cb1c","modified":1677228324810},{"_id":"themes/quiet/source/css/pages/about.less","hash":"74dd4eba41dba4c204c03072415c771f92fe216c","modified":1677228324810},{"_id":"themes/quiet/source/css/pages/archive.less","hash":"7394878db4bc9746c1433c98e0b3769e612971d8","modified":1677228324810},{"_id":"themes/quiet/source/css/pages/categories.less","hash":"385a9b2bbac15ff1d1b003428bad65bb3519c3d1","modified":1677228324810},{"_id":"themes/quiet/source/css/pages/home.less","hash":"16f7dd1eb047fac29f7a06532e48d2164bee2294","modified":1677228324810},{"_id":"themes/quiet/source/css/pages/links.less","hash":"84faae24326968583c6cd7f817fd5e9ee5fcd4e7","modified":1677228324810},{"_id":"themes/quiet/source/css/pages/post.less","hash":"612bf0fcf32e17467f253cee05c802de8fc941a3","modified":1677228324810},{"_id":"themes/quiet/source/css/pages/tag.less","hash":"755ade4fec877912d071bebd783f90a01eede0fd","modified":1677228324810},{"_id":"themes/quiet/source/css/pages/tags.less","hash":"be0053740b8e0a9b544ed3c6f7712bbf7723f155","modified":1677228324810},{"_id":"themes/quiet/source/css/plugin/fancybox.css","hash":"cbce0cfc36f47e30e9c9824875f0b854a05f1916","modified":1677228324810},{"_id":"themes/quiet/source/css/plugin/gitalk.css","hash":"90aa2073fac634a95f1e6fa09ce829946f00d4cb","modified":1677228324810},{"_id":"themes/quiet/source/css/public/article_cente.less","hash":"b77569a9e2536bb18a6ddc7862acfc5b0feb7fcb","modified":1677228324810},{"_id":"themes/quiet/source/css/public/color.less","hash":"eb152b594ddc29873d58bf1aa3d0d9898c33c726","modified":1677228324810},{"_id":"themes/quiet/source/css/public/content.less","hash":"45fd69758b960921614e6ecfaac94206b7bcc5fd","modified":1677228324810},{"_id":"themes/quiet/source/css/public/header_background.less","hash":"bb4e6c1bbacf0e4b714f4a0d534560cc51b45db1","modified":1677228324810},{"_id":"themes/quiet/source/css/public/mixins.less","hash":"a3b4c2f504a454bda7ebb705831763c4b0968cf9","modified":1677228324810},{"_id":"themes/quiet/source/css/widget/food.less","hash":"5374f82f9fd1bd6b4beef06c2443a16cc378e126","modified":1677228324810},{"_id":"themes/quiet/source/css/widget/grouping.less","hash":"d36a749580797ac6d2c0347ce0f7fc424aa4c560","modified":1677228324810},{"_id":"themes/quiet/source/css/widget/header.less","hash":"dda759916684b58f9ecc8bb903cfcb3463164f3c","modified":1677228324810},{"_id":"themes/quiet/source/css/widget/header_body.less","hash":"30f31f96cafc2b7ae933c3f72c6f444ee904934f","modified":1677228324810},{"_id":"themes/quiet/source/js/fancybox.umd.js","hash":"d6203bf95728c98e8d12fdc8100f98da48260312","modified":1677228324810},{"_id":"themes/quiet/source/js/hljs.min.js","hash":"f599d9b58453de85ab2ee2e68b2702a3d55c0830","modified":1677228324814},{"_id":"themes/quiet/source/js/jquery.min.js","hash":"ad886e472b3557f3dc7dfa2bc43468ab8d1cef5b","modified":1677228324814},{"_id":"themes/quiet/source/js/gitalk.min.js","hash":"8f0a3d5a46e23eeab52c965387a3ffcd7e00d723","modified":1677228324814},{"_id":"source/404.md","hash":"2b04d833624a0b3ff9dae5b4e3304a7a42d0914a","modified":1621240169000},{"_id":"source/_posts/docker-install.md","hash":"f5494a24e2e537fbae8780fc29eb12417f66975d","modified":1621850588000},{"_id":"source/_posts/docker-volume.md","hash":"c47cc8dfe4b930a6fec3c34c36e0869f87f9c427","modified":1621850588000},{"_id":"source/_posts/hello-world1.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1677228232434},{"_id":"source/_posts/nginx-hexo-config.md","hash":"e214f583d6692d1a8650e23eb094f191ccb1cbd0","modified":1621913264000},{"_id":"source/about/index.md","hash":"8a381feff27033f89c01c978b3bb3db3055d1afa","modified":1677231985258},{"_id":"source/categories/index.md","hash":"95dfc14c5423a6b914e0b420b35660198d984d7d","modified":1677231908879},{"_id":"source/links/index.md","hash":"a294ef605267efbad9a130a203fdc0b8b3815a6a","modified":1677232039502},{"_id":"source/.DS_Store","hash":"0935ddd35f7d55208863a758e2b7aeff97406545","modified":1677564658053},{"_id":"source/css/.DS_Store","hash":"75b22b6a020bdf7a452db2f4d29044b8a88a6661","modified":1677564658053},{"_id":"source/css/index.less","hash":"5d9c79ae6a842fa2f74f74e7d6931cc509b75346","modified":1677564658053},{"_id":"source/image/.DS_Store","hash":"3128ff56de5645c269da786b475fd357f1db7a5f","modified":1677564658053},{"_id":"source/image/favicon.ico","hash":"fad2c16f133094e29f9c4aa8a946b7aa200ec98b","modified":1677564658053},{"_id":"source/image/logo.png","hash":"3487c0299f2f69abc8bbbd5d7c61ad77b311c801","modified":1677564658053},{"_id":"source/image/pattern.png","hash":"e9a79b9b5716c781e8f5acf3462e42fae7f39741","modified":1677564658053},{"_id":"source/js/.DS_Store","hash":"5c85c7c09e8fb1060d46fb1a2c18bd26eb197785","modified":1677564658053},{"_id":"source/js/fancybox-images.js","hash":"1eee6b143f944bce1dab2a9f2141435e545bc537","modified":1677564658053},{"_id":"source/js/gotop.js","hash":"78f04d8833cf9916f71469fb80722004dce09b28","modified":1677564658057},{"_id":"source/js/index.js","hash":"2023e077272d3bfbc8c02791b402b6cf5ce6b118","modified":1677564658057},{"_id":"source/css/highlight/atom-one-dark.less","hash":"2e77891a36adb367984ee7c2776059120303cb1c","modified":1677564658053},{"_id":"source/css/pages/about.less","hash":"74dd4eba41dba4c204c03072415c771f92fe216c","modified":1677564658053},{"_id":"source/css/pages/archive.less","hash":"7394878db4bc9746c1433c98e0b3769e612971d8","modified":1677564658053},{"_id":"source/css/pages/categories.less","hash":"385a9b2bbac15ff1d1b003428bad65bb3519c3d1","modified":1677564658053},{"_id":"source/css/pages/home.less","hash":"16f7dd1eb047fac29f7a06532e48d2164bee2294","modified":1677564658053},{"_id":"source/css/pages/links.less","hash":"84faae24326968583c6cd7f817fd5e9ee5fcd4e7","modified":1677564658053},{"_id":"source/css/pages/post.less","hash":"612bf0fcf32e17467f253cee05c802de8fc941a3","modified":1677564658053},{"_id":"source/css/pages/tag.less","hash":"755ade4fec877912d071bebd783f90a01eede0fd","modified":1677564658053},{"_id":"source/css/pages/tags.less","hash":"be0053740b8e0a9b544ed3c6f7712bbf7723f155","modified":1677564658053},{"_id":"source/css/plugin/fancybox.css","hash":"cbce0cfc36f47e30e9c9824875f0b854a05f1916","modified":1677564658053},{"_id":"source/css/plugin/gitalk.css","hash":"90aa2073fac634a95f1e6fa09ce829946f00d4cb","modified":1677564658053},{"_id":"source/css/public/article_cente.less","hash":"b77569a9e2536bb18a6ddc7862acfc5b0feb7fcb","modified":1677564658053},{"_id":"source/css/public/color.less","hash":"eb152b594ddc29873d58bf1aa3d0d9898c33c726","modified":1677564658053},{"_id":"source/css/public/content.less","hash":"45fd69758b960921614e6ecfaac94206b7bcc5fd","modified":1677564658053},{"_id":"source/css/public/header_background.less","hash":"bb4e6c1bbacf0e4b714f4a0d534560cc51b45db1","modified":1677564658053},{"_id":"source/css/public/mixins.less","hash":"a3b4c2f504a454bda7ebb705831763c4b0968cf9","modified":1677564658053},{"_id":"source/css/widget/food.less","hash":"5374f82f9fd1bd6b4beef06c2443a16cc378e126","modified":1677564658053},{"_id":"source/css/widget/grouping.less","hash":"d36a749580797ac6d2c0347ce0f7fc424aa4c560","modified":1677564658053},{"_id":"source/css/widget/header.less","hash":"dda759916684b58f9ecc8bb903cfcb3463164f3c","modified":1677564658053},{"_id":"source/css/widget/header_body.less","hash":"30f31f96cafc2b7ae933c3f72c6f444ee904934f","modified":1677564658053},{"_id":"source/js/fancybox.umd.js","hash":"d6203bf95728c98e8d12fdc8100f98da48260312","modified":1677564658053},{"_id":"source/js/hljs.min.js","hash":"f599d9b58453de85ab2ee2e68b2702a3d55c0830","modified":1677564658057},{"_id":"source/js/jquery.min.js","hash":"ad886e472b3557f3dc7dfa2bc43468ab8d1cef5b","modified":1677564658057},{"_id":"source/js/gitalk.min.js","hash":"8f0a3d5a46e23eeab52c965387a3ffcd7e00d723","modified":1677564658057}],"Category":[{"name":"项目案例","_id":"cleicrb0z0004m6ir3r148xzh"},{"name":"文章分类","_id":"cleict5ee000em6ir6kbx8yir"},{"name":"docker","_id":"cleicvvql000jm6ir099ngqyw"}],"Data":[],"Page":[{"title":"文章分类","date":"2020-11-01T16:00:00.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2020-11-02\ntype: categories\nlayout: categories\n---","updated":"2023-02-24T09:45:08.879Z","path":"categories/index.html","_id":"cleicjzr20001m6ir79kif43s","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于我","date":"2020-11-02T16:00:00.000Z","aubot":"Cange-Q","portrait":"https://cdn.jsdelivr.net/gh/duogongneng/MyBlogImg/imgIMG_7327.jpeg","describe":"一个阳光快乐的BOY,在正合适的年龄里希望遇见正好的你。","type":"about","layout":"about","comments":0,"_content":"","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2020-11-03\naubot: Cange-Q\nportrait: 'https://cdn.jsdelivr.net/gh/duogongneng/MyBlogImg/imgIMG_7327.jpeg'\ndescribe: '一个阳光快乐的BOY,在正合适的年龄里希望遇见正好的你。'\ntype: \"about\"\nlayout: \"about\"\ncomments: false\n---","updated":"2023-02-24T09:46:25.258Z","path":"about/index.html","_id":"cleiclp3s0002m6ir71my9m13","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"友情链接","date":"2020-09-18T16:00:00.000Z","type":"links","layout":"links","comments":0,"_content":"","source":"links/index.md","raw":"---\ntitle: 友情链接\ndate: 2020-09-19\ntype: \"links\"\nlayout: \"links\"\ncomments: false\n---","updated":"2023-02-24T09:47:19.502Z","path":"links/index.html","_id":"cleicnd610003m6irfa1k98b6","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"#<div style=\"text-align: center;\">404</div>\n\n这里也许是一个页面，但是现在不是了","source":"404.md","raw":"#<div style=\"text-align: center;\">404</div>\n\n这里也许是一个页面，但是现在不是了","date":"2023-02-24T09:53:41.909Z","updated":"2021-05-17T08:29:29.000Z","path":"404.html","_id":"cleicvnj7000hm6ir7295fvuu","title":"","comments":1,"layout":"page","content":"<p>#<div style=\"text-align: center;\">404</div></p>\n<p>这里也许是一个页面，但是现在不是了</p>\n","site":{"data":{}},"excerpt":"","more":"<p>#<div style=\"text-align: center;\">404</div></p>\n<p>这里也许是一个页面，但是现在不是了</p>\n"}],"Post":[{"title":"一个简约扁平化的Hexo静态主题博客-Quiet","comments":0,"aubot":"dongle","aubot_link":"https://github.com/79E/hexo-theme-quiet","excerpt":"采用简约大方的扁平化Hexo-Quiet主题","toc":false,"date":"2020-11-03T12:33:36.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: 一个简约扁平化的Hexo静态主题博客-Quiet\ncomments: false\ncategories: 项目案例\naubot: dongle\naubot_link: 'https://github.com/79E/hexo-theme-quiet'\ntags:\n  - Hexo\n  - Quiet\n  - 主题\n  - 静态主题\nexcerpt: 采用简约大方的扁平化Hexo-Quiet主题\ntoc: false\ndate: 2020-11-03 20:33:36\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"updated":"2023-02-24T09:52:04.625Z","_id":"cleiahb390000k7ir9wm272vp","layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world1.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world1","published":1,"date":"2023-02-24T09:32:57.534Z","updated":"2023-02-24T08:43:52.434Z","_id":"cleic4zda0000m6ir5yq0f4w9","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"Docker，docker-compose安装","toc":true,"date":"2021-05-01T05:03:58.000Z","_content":"## 安装Docker\n### 卸载之前版本\n```shell\nyum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-selinux \\\n                  docker-engine-selinux \\\n                  docker-engine\n```\n<!--more-->\n### 安装工具\n```shell\nsudo yum install -y yum-utils\n```\n### 设置国内仓库源\n```shell\nsudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n```\n### 安装最新Docker\n```shell\nyum install docker-ce\n```\n### 安装指定版本\n\n### 查看Docker所有版本\n```shell\nyum list docker-ce --showduplicates | sort -r\n```\n```\nLoading mirror speeds from cached hostfile\nLoaded plugins: fastestmirror，product-id，search-disabled-repos，subscription-\nInstalled Packages\ndocker-ce.x86_64            3:20.10.6-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:20.10.5-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:20.10.4-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:20.10.3-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:20.10.2-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:20.10.1-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:20.10.0-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:19.03.9-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:19.03.8-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:19.03.7-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:19.03.6-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:19.03.5-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:19.03.4-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:19.03.3-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:19.03.2-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:19.03.15-3.el7                   docker-ce-stable \ndocker-ce.x86_64            3:19.03.14-3.el7                   docker-ce-stable \ndocker-ce.x86_64            3:19.03.1-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:19.03.13-3.el7                   docker-ce-stable \ndocker-ce.x86_64            3:19.03.12-3.el7                   docker-ce-stable \ndocker-ce.x86_64            3:19.03.11-3.el7                   docker-ce-stable \ndocker-ce.x86_64            3:19.03.10-3.el7                   docker-ce-stable \ndocker-ce.x86_64            3:19.03.0-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:18.09.9-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:18.09.8-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:18.09.7-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:18.09.6-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:18.09.5-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:18.09.4-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:18.09.3-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:18.09.2-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:18.09.1-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:18.09.0-3.el7                    docker-ce-stable \ndocker-ce.x86_64            18.06.3.ce-3.el7                   docker-ce-stable \ndocker-ce.x86_64            18.06.3.ce-3.el7                   @docker-ce-stable\ndocker-ce.x86_64            18.06.2.ce-3.el7                   docker-ce-stable \ndocker-ce.x86_64            18.06.1.ce-3.el7                   docker-ce-stable \ndocker-ce.x86_64            18.06.0.ce-3.el7                   docker-ce-stable \ndocker-ce.x86_64            18.03.1.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            18.03.0.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            17.12.1.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            17.12.0.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            17.09.1.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            17.09.0.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            17.06.2.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            17.06.1.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            17.06.0.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            17.03.3.ce-1.el7                   docker-ce-stable \ndocker-ce.x86_64            17.03.2.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            17.03.1.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            17.03.0.ce-1.el7.centos            docker-ce-stable \nAvailable Packages\n```\n\n#### 安装指定版本\n```shell\nyum install docker-ce-18.06.3.ce-3.el7\n```\n## 安装docker-compose\n```shell\n # 加快下载\n curl -L https://download.fastgit.org/docker/compose/releases/download/1.29.2/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\n```\n### 赋予执行权限\n```shell\nchmod +x /usr/local/bin/docker-compose\n```\n\n\n\n","source":"_posts/docker-install.md","raw":"---\ntitle: Docker，docker-compose安装\ntoc: true\ndate: 2021/05/01 13:03:58\ncategories:\n- docker\n---\n## 安装Docker\n### 卸载之前版本\n```shell\nyum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-selinux \\\n                  docker-engine-selinux \\\n                  docker-engine\n```\n<!--more-->\n### 安装工具\n```shell\nsudo yum install -y yum-utils\n```\n### 设置国内仓库源\n```shell\nsudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n```\n### 安装最新Docker\n```shell\nyum install docker-ce\n```\n### 安装指定版本\n\n### 查看Docker所有版本\n```shell\nyum list docker-ce --showduplicates | sort -r\n```\n```\nLoading mirror speeds from cached hostfile\nLoaded plugins: fastestmirror，product-id，search-disabled-repos，subscription-\nInstalled Packages\ndocker-ce.x86_64            3:20.10.6-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:20.10.5-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:20.10.4-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:20.10.3-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:20.10.2-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:20.10.1-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:20.10.0-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:19.03.9-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:19.03.8-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:19.03.7-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:19.03.6-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:19.03.5-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:19.03.4-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:19.03.3-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:19.03.2-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:19.03.15-3.el7                   docker-ce-stable \ndocker-ce.x86_64            3:19.03.14-3.el7                   docker-ce-stable \ndocker-ce.x86_64            3:19.03.1-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:19.03.13-3.el7                   docker-ce-stable \ndocker-ce.x86_64            3:19.03.12-3.el7                   docker-ce-stable \ndocker-ce.x86_64            3:19.03.11-3.el7                   docker-ce-stable \ndocker-ce.x86_64            3:19.03.10-3.el7                   docker-ce-stable \ndocker-ce.x86_64            3:19.03.0-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:18.09.9-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:18.09.8-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:18.09.7-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:18.09.6-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:18.09.5-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:18.09.4-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:18.09.3-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:18.09.2-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:18.09.1-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:18.09.0-3.el7                    docker-ce-stable \ndocker-ce.x86_64            18.06.3.ce-3.el7                   docker-ce-stable \ndocker-ce.x86_64            18.06.3.ce-3.el7                   @docker-ce-stable\ndocker-ce.x86_64            18.06.2.ce-3.el7                   docker-ce-stable \ndocker-ce.x86_64            18.06.1.ce-3.el7                   docker-ce-stable \ndocker-ce.x86_64            18.06.0.ce-3.el7                   docker-ce-stable \ndocker-ce.x86_64            18.03.1.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            18.03.0.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            17.12.1.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            17.12.0.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            17.09.1.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            17.09.0.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            17.06.2.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            17.06.1.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            17.06.0.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            17.03.3.ce-1.el7                   docker-ce-stable \ndocker-ce.x86_64            17.03.2.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            17.03.1.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            17.03.0.ce-1.el7.centos            docker-ce-stable \nAvailable Packages\n```\n\n#### 安装指定版本\n```shell\nyum install docker-ce-18.06.3.ce-3.el7\n```\n## 安装docker-compose\n```shell\n # 加快下载\n curl -L https://download.fastgit.org/docker/compose/releases/download/1.29.2/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\n```\n### 赋予执行权限\n```shell\nchmod +x /usr/local/bin/docker-compose\n```\n\n\n\n","slug":"docker-install","published":1,"updated":"2021-05-24T10:03:08.000Z","_id":"cleicvvqk000im6ir6znrf7is","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"安装Docker\"><a href=\"#安装Docker\" class=\"headerlink\" title=\"安装Docker\"></a>安装Docker</h2><h3 id=\"卸载之前版本\"><a href=\"#卸载之前版本\" class=\"headerlink\" title=\"卸载之前版本\"></a>卸载之前版本</h3><pre><code class=\"shell\">yum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-selinux \\\n                  docker-engine-selinux \\\n                  docker-engine\n</code></pre>\n<span id=\"more\"></span>\n<h3 id=\"安装工具\"><a href=\"#安装工具\" class=\"headerlink\" title=\"安装工具\"></a>安装工具</h3><pre><code class=\"shell\">sudo yum install -y yum-utils\n</code></pre>\n<h3 id=\"设置国内仓库源\"><a href=\"#设置国内仓库源\" class=\"headerlink\" title=\"设置国内仓库源\"></a>设置国内仓库源</h3><pre><code class=\"shell\">sudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n</code></pre>\n<h3 id=\"安装最新Docker\"><a href=\"#安装最新Docker\" class=\"headerlink\" title=\"安装最新Docker\"></a>安装最新Docker</h3><pre><code class=\"shell\">yum install docker-ce\n</code></pre>\n<h3 id=\"安装指定版本\"><a href=\"#安装指定版本\" class=\"headerlink\" title=\"安装指定版本\"></a>安装指定版本</h3><h3 id=\"查看Docker所有版本\"><a href=\"#查看Docker所有版本\" class=\"headerlink\" title=\"查看Docker所有版本\"></a>查看Docker所有版本</h3><pre><code class=\"shell\">yum list docker-ce --showduplicates | sort -r\n</code></pre>\n<pre><code>Loading mirror speeds from cached hostfile\nLoaded plugins: fastestmirror，product-id，search-disabled-repos，subscription-\nInstalled Packages\ndocker-ce.x86_64            3:20.10.6-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:20.10.5-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:20.10.4-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:20.10.3-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:20.10.2-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:20.10.1-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:20.10.0-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:19.03.9-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:19.03.8-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:19.03.7-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:19.03.6-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:19.03.5-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:19.03.4-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:19.03.3-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:19.03.2-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:19.03.15-3.el7                   docker-ce-stable \ndocker-ce.x86_64            3:19.03.14-3.el7                   docker-ce-stable \ndocker-ce.x86_64            3:19.03.1-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:19.03.13-3.el7                   docker-ce-stable \ndocker-ce.x86_64            3:19.03.12-3.el7                   docker-ce-stable \ndocker-ce.x86_64            3:19.03.11-3.el7                   docker-ce-stable \ndocker-ce.x86_64            3:19.03.10-3.el7                   docker-ce-stable \ndocker-ce.x86_64            3:19.03.0-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:18.09.9-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:18.09.8-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:18.09.7-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:18.09.6-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:18.09.5-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:18.09.4-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:18.09.3-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:18.09.2-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:18.09.1-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:18.09.0-3.el7                    docker-ce-stable \ndocker-ce.x86_64            18.06.3.ce-3.el7                   docker-ce-stable \ndocker-ce.x86_64            18.06.3.ce-3.el7                   @docker-ce-stable\ndocker-ce.x86_64            18.06.2.ce-3.el7                   docker-ce-stable \ndocker-ce.x86_64            18.06.1.ce-3.el7                   docker-ce-stable \ndocker-ce.x86_64            18.06.0.ce-3.el7                   docker-ce-stable \ndocker-ce.x86_64            18.03.1.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            18.03.0.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            17.12.1.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            17.12.0.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            17.09.1.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            17.09.0.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            17.06.2.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            17.06.1.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            17.06.0.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            17.03.3.ce-1.el7                   docker-ce-stable \ndocker-ce.x86_64            17.03.2.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            17.03.1.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            17.03.0.ce-1.el7.centos            docker-ce-stable \nAvailable Packages\n</code></pre>\n<h4 id=\"安装指定版本-1\"><a href=\"#安装指定版本-1\" class=\"headerlink\" title=\"安装指定版本\"></a>安装指定版本</h4><pre><code class=\"shell\">yum install docker-ce-18.06.3.ce-3.el7\n</code></pre>\n<h2 id=\"安装docker-compose\"><a href=\"#安装docker-compose\" class=\"headerlink\" title=\"安装docker-compose\"></a>安装docker-compose</h2><pre><code class=\"shell\"> # 加快下载\n curl -L https://download.fastgit.org/docker/compose/releases/download/1.29.2/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose\n</code></pre>\n<h3 id=\"赋予执行权限\"><a href=\"#赋予执行权限\" class=\"headerlink\" title=\"赋予执行权限\"></a>赋予执行权限</h3><pre><code class=\"shell\">chmod +x /usr/local/bin/docker-compose\n</code></pre>\n","site":{"data":{}},"excerpt":"<h2 id=\"安装Docker\"><a href=\"#安装Docker\" class=\"headerlink\" title=\"安装Docker\"></a>安装Docker</h2><h3 id=\"卸载之前版本\"><a href=\"#卸载之前版本\" class=\"headerlink\" title=\"卸载之前版本\"></a>卸载之前版本</h3><pre><code class=\"shell\">yum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-selinux \\\n                  docker-engine-selinux \\\n                  docker-engine\n</code></pre>","more":"<h3 id=\"安装工具\"><a href=\"#安装工具\" class=\"headerlink\" title=\"安装工具\"></a>安装工具</h3><pre><code class=\"shell\">sudo yum install -y yum-utils\n</code></pre>\n<h3 id=\"设置国内仓库源\"><a href=\"#设置国内仓库源\" class=\"headerlink\" title=\"设置国内仓库源\"></a>设置国内仓库源</h3><pre><code class=\"shell\">sudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n</code></pre>\n<h3 id=\"安装最新Docker\"><a href=\"#安装最新Docker\" class=\"headerlink\" title=\"安装最新Docker\"></a>安装最新Docker</h3><pre><code class=\"shell\">yum install docker-ce\n</code></pre>\n<h3 id=\"安装指定版本\"><a href=\"#安装指定版本\" class=\"headerlink\" title=\"安装指定版本\"></a>安装指定版本</h3><h3 id=\"查看Docker所有版本\"><a href=\"#查看Docker所有版本\" class=\"headerlink\" title=\"查看Docker所有版本\"></a>查看Docker所有版本</h3><pre><code class=\"shell\">yum list docker-ce --showduplicates | sort -r\n</code></pre>\n<pre><code>Loading mirror speeds from cached hostfile\nLoaded plugins: fastestmirror，product-id，search-disabled-repos，subscription-\nInstalled Packages\ndocker-ce.x86_64            3:20.10.6-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:20.10.5-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:20.10.4-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:20.10.3-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:20.10.2-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:20.10.1-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:20.10.0-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:19.03.9-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:19.03.8-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:19.03.7-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:19.03.6-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:19.03.5-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:19.03.4-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:19.03.3-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:19.03.2-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:19.03.15-3.el7                   docker-ce-stable \ndocker-ce.x86_64            3:19.03.14-3.el7                   docker-ce-stable \ndocker-ce.x86_64            3:19.03.1-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:19.03.13-3.el7                   docker-ce-stable \ndocker-ce.x86_64            3:19.03.12-3.el7                   docker-ce-stable \ndocker-ce.x86_64            3:19.03.11-3.el7                   docker-ce-stable \ndocker-ce.x86_64            3:19.03.10-3.el7                   docker-ce-stable \ndocker-ce.x86_64            3:19.03.0-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:18.09.9-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:18.09.8-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:18.09.7-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:18.09.6-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:18.09.5-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:18.09.4-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:18.09.3-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:18.09.2-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:18.09.1-3.el7                    docker-ce-stable \ndocker-ce.x86_64            3:18.09.0-3.el7                    docker-ce-stable \ndocker-ce.x86_64            18.06.3.ce-3.el7                   docker-ce-stable \ndocker-ce.x86_64            18.06.3.ce-3.el7                   @docker-ce-stable\ndocker-ce.x86_64            18.06.2.ce-3.el7                   docker-ce-stable \ndocker-ce.x86_64            18.06.1.ce-3.el7                   docker-ce-stable \ndocker-ce.x86_64            18.06.0.ce-3.el7                   docker-ce-stable \ndocker-ce.x86_64            18.03.1.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            18.03.0.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            17.12.1.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            17.12.0.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            17.09.1.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            17.09.0.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            17.06.2.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            17.06.1.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            17.06.0.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            17.03.3.ce-1.el7                   docker-ce-stable \ndocker-ce.x86_64            17.03.2.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            17.03.1.ce-1.el7.centos            docker-ce-stable \ndocker-ce.x86_64            17.03.0.ce-1.el7.centos            docker-ce-stable \nAvailable Packages\n</code></pre>\n<h4 id=\"安装指定版本-1\"><a href=\"#安装指定版本-1\" class=\"headerlink\" title=\"安装指定版本\"></a>安装指定版本</h4><pre><code class=\"shell\">yum install docker-ce-18.06.3.ce-3.el7\n</code></pre>\n<h2 id=\"安装docker-compose\"><a href=\"#安装docker-compose\" class=\"headerlink\" title=\"安装docker-compose\"></a>安装docker-compose</h2><pre><code class=\"shell\"> # 加快下载\n curl -L https://download.fastgit.org/docker/compose/releases/download/1.29.2/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose\n</code></pre>\n<h3 id=\"赋予执行权限\"><a href=\"#赋予执行权限\" class=\"headerlink\" title=\"赋予执行权限\"></a>赋予执行权限</h3><pre><code class=\"shell\">chmod +x /usr/local/bin/docker-compose\n</code></pre>"},{"title":"Docker中的volume到底是个什么东西？","toc":true,"date":"2021-05-02T11:40:01.000Z","_content":"\n## 概述\n\ncontainer中数据都是在可写层上，如果container不存在，那么数据也将会不存在。我们一般都需要把数据保存至host上，并且持久保存。Docker提供了几种保持数据的方式\n\nDocker中的保存数据类型分为四种：\n\n1. volumes  （数据卷）\n2. bind-mounts  （绑定挂载）\n3. tmpfs （只存在内存中，不会写入文件系统）\n4. pipes （命名管道。用户host和container之前的通信，通常是在container中运行第三方工具）\n\n<!-- more -->\n\n## volumes\n\n存在host文件系统中，和 `bind-mounts` 工作方式类似，这种类型是由Docker管理。默认是存在`/var/lib/docker/volumes`目录下。\n\n* 可以和多个容器共享数据\n\n* 不会自动删除，即使container被干掉，除非手动删除volume\n\n* 创建volume时，如未指定名称，Docker会为其随机生成名称（称为匿名卷，指定名称称为命名卷）\n\n* 不会增加使用volume的container大小\n\n* 容易备份和迁移数据\n\n### Docker CLI  \n\n手动显示创建\n\n``` bash\n$ docker volume create dongle-vo\n```\n\n使用`-v`让Docker自行创建\n\n```bash\n$ docker run --name nginx -v dongle-vo1:/etc/nginx/conf.d  nginx:alpine\n```\n\n或者使用`--mount`创建(推荐，相比`-v`语义化，明确)\n\n```bash\n$ docker run --name nginx --mount type=volume,source=dongle-vo1,target=/etc/nginx/conf.d  nginx:alpine \n```\n\n> type值有三种：volume（卷），bind（绑定挂载，也就是bind-mount），tmpfs（内存方式）。 \n>\n> source：对于volume是命名卷的名称，而对于bind类型是host上的绝对路径（不存在会报错）可以简写为src\n>\n> target：必需，容器路径（绝对路径）可以简写为dst\n>\n> 其他具体参数请查看[官方文档](https://docs.docker.com/storage/)\n>\n> 不显示指定type值，默认是volume。不指定source则按创建匿名卷方式挂载\n\n\n\n运行一个Nginx容器，创建一个名称为 `dongle-vo1` 的命名卷，挂载到container `/etc/nginx/conf.d`目录中。\n\n> 如果volume中没有内容，container中有内容。Docker则将container中的内容复制至volume中。这点是不同于`bind-mount`，`bind-mount`类型的volume中的内容会覆盖container内容\n\n查看volume列表\n\n```bash\n$ docker volume ls\n\nlocal     dongle-vo1\n```\n\n查看volume\n\n```bash\n$ docker inspect dongle-vo1\n\n[\n    {\n        \"Driver\": \"local\",\n        \"Labels\": null,\n        \"Mountpoint\": \"/var/lib/docker/volumes/dongle-vo1/_data\",\n        \"Name\": \"dongle-vo1\",\n        \"Options\": null,\n        \"Scope\": \"local\"\n    }\n]\n\n```\n\n进入挂载点查看挂载的内容\n\n```bash\n$ cd /var/lib/docker/volumes/dongle-vo1/_data\n\ndefault.conf\n```\n\n### Dockerfile\n\n那Dockerfile里的VOLUME 是怎么用的?\n\n```shell Dockerfile\n# 这俩个效果是一样的\nVOLUME dongle-vo\nVOLUME [\"/dongle-vo\"]\n```\n\nVOLUME可以指定多个。Docker会创建匿名卷挂载到container中的`dongle-vo`目录，也就是说这里指定的目录是container中的，不存在则创建。container目录里有内容会被复制到匿名卷中。相当于 `docker run -v dongle-vo ` 或者  `docker run --mount target=/dongle-vo`\n\n那我可不可以用VOLUME这个绑定host目录呢？是不可以的，挂载host目录是依赖于host系统的，并不能保证通用性。\n\n指定host目录或者命名卷可以这样`docker run --mount type=volume,source=dongle-vo1,target=/dongle-vo`，使用`-v`也是一样的\n\n### docker-compose\n\n前者为host目录，后者container目录\n\n```yaml docker-compose\nservices:\n  nginx:\n    image: nginx:alpine\n    container_name: nginx\n    volumes:\n      # 匿名卷方式挂载container中的dongle-vo目录\n      - dongle-vo\n      # 命名卷挂载container中的目录\n      - dongle-vo:/etc/nginx\n# 命名卷不存在则用这种方式让docker自行创建      \nvolumes:\n  dongle-vo:\n```\n\n\n\n## bind-mounts\n\n绑定挂载可以在host上任何位置，需要自行维护绑定挂载的目录，使用绑定挂载时，host上的文件内容会被复制到container中。挂载的文件或目录不存在，则创建\n\n### Docker-CLI\n\n```bash\n$ docker run -v ~/dongle:/etc/nginx \n```\n\n`-v`可以用`~`家目录方式或者绝对路径\n\n```bash\n$ docker run --mount type=bind,src=/root/dongle,dst=/etc/nginx/conf.d\n\n```\n\n`--mount`source必须是host上的绝对路径，如果不存在则会报错。俩种方式都可以使用`$(pwd)`表示当前目录\n\n### docker-compose\n\ndocker-compose使用bind-mount方式，则是这样\n\n```yaml\nservices:\n  nginx:\n    image: nginx:alpine\n    container_name: nginx\n    volumes:\n      # 绝对路径挂载\n      - /home/dongle-vo:/etc/nginx/conf.d\n      # 挂载当前目录下的dongle-vo\n      - ./dongle-vo:/etc/nginx/conf.d\n      # 家目录下的dongle-vo\n      - ~/dongle-vo:/etc/nginx/conf.d\n```\n\nDocker绑定挂载卷时，对于不存在的文件或目录，会始终为其创建目录\n\nbind-mount绑定挂载需要注意几点： \n\n| host             | container        | 结果                                   |\n| :--------------- | :--------------- | :------------------------------------- |\n| 文件或目录不存在 | 文件或目录不存在 | 在host和container均创建目录            |\n| **文件**不存在   | 文件存在         | 在host中为其创建一个目录，启动容器报错 |\n| 文件存在         | 文件不存在       | 复制host文件至container中              |\n| 文件存在         | 文件存在         | host文件覆盖container文件              |\n\n挂载host上的空目录，那么container中目录内容会被host覆盖。\n","source":"_posts/docker-volume.md","raw":"---\n\n\ntitle: Docker中的volume到底是个什么东西？\ntoc: true\ndate: 2021/05/02 19:40:01\ncategories:\n- docker\n---\n\n## 概述\n\ncontainer中数据都是在可写层上，如果container不存在，那么数据也将会不存在。我们一般都需要把数据保存至host上，并且持久保存。Docker提供了几种保持数据的方式\n\nDocker中的保存数据类型分为四种：\n\n1. volumes  （数据卷）\n2. bind-mounts  （绑定挂载）\n3. tmpfs （只存在内存中，不会写入文件系统）\n4. pipes （命名管道。用户host和container之前的通信，通常是在container中运行第三方工具）\n\n<!-- more -->\n\n## volumes\n\n存在host文件系统中，和 `bind-mounts` 工作方式类似，这种类型是由Docker管理。默认是存在`/var/lib/docker/volumes`目录下。\n\n* 可以和多个容器共享数据\n\n* 不会自动删除，即使container被干掉，除非手动删除volume\n\n* 创建volume时，如未指定名称，Docker会为其随机生成名称（称为匿名卷，指定名称称为命名卷）\n\n* 不会增加使用volume的container大小\n\n* 容易备份和迁移数据\n\n### Docker CLI  \n\n手动显示创建\n\n``` bash\n$ docker volume create dongle-vo\n```\n\n使用`-v`让Docker自行创建\n\n```bash\n$ docker run --name nginx -v dongle-vo1:/etc/nginx/conf.d  nginx:alpine\n```\n\n或者使用`--mount`创建(推荐，相比`-v`语义化，明确)\n\n```bash\n$ docker run --name nginx --mount type=volume,source=dongle-vo1,target=/etc/nginx/conf.d  nginx:alpine \n```\n\n> type值有三种：volume（卷），bind（绑定挂载，也就是bind-mount），tmpfs（内存方式）。 \n>\n> source：对于volume是命名卷的名称，而对于bind类型是host上的绝对路径（不存在会报错）可以简写为src\n>\n> target：必需，容器路径（绝对路径）可以简写为dst\n>\n> 其他具体参数请查看[官方文档](https://docs.docker.com/storage/)\n>\n> 不显示指定type值，默认是volume。不指定source则按创建匿名卷方式挂载\n\n\n\n运行一个Nginx容器，创建一个名称为 `dongle-vo1` 的命名卷，挂载到container `/etc/nginx/conf.d`目录中。\n\n> 如果volume中没有内容，container中有内容。Docker则将container中的内容复制至volume中。这点是不同于`bind-mount`，`bind-mount`类型的volume中的内容会覆盖container内容\n\n查看volume列表\n\n```bash\n$ docker volume ls\n\nlocal     dongle-vo1\n```\n\n查看volume\n\n```bash\n$ docker inspect dongle-vo1\n\n[\n    {\n        \"Driver\": \"local\",\n        \"Labels\": null,\n        \"Mountpoint\": \"/var/lib/docker/volumes/dongle-vo1/_data\",\n        \"Name\": \"dongle-vo1\",\n        \"Options\": null,\n        \"Scope\": \"local\"\n    }\n]\n\n```\n\n进入挂载点查看挂载的内容\n\n```bash\n$ cd /var/lib/docker/volumes/dongle-vo1/_data\n\ndefault.conf\n```\n\n### Dockerfile\n\n那Dockerfile里的VOLUME 是怎么用的?\n\n```shell Dockerfile\n# 这俩个效果是一样的\nVOLUME dongle-vo\nVOLUME [\"/dongle-vo\"]\n```\n\nVOLUME可以指定多个。Docker会创建匿名卷挂载到container中的`dongle-vo`目录，也就是说这里指定的目录是container中的，不存在则创建。container目录里有内容会被复制到匿名卷中。相当于 `docker run -v dongle-vo ` 或者  `docker run --mount target=/dongle-vo`\n\n那我可不可以用VOLUME这个绑定host目录呢？是不可以的，挂载host目录是依赖于host系统的，并不能保证通用性。\n\n指定host目录或者命名卷可以这样`docker run --mount type=volume,source=dongle-vo1,target=/dongle-vo`，使用`-v`也是一样的\n\n### docker-compose\n\n前者为host目录，后者container目录\n\n```yaml docker-compose\nservices:\n  nginx:\n    image: nginx:alpine\n    container_name: nginx\n    volumes:\n      # 匿名卷方式挂载container中的dongle-vo目录\n      - dongle-vo\n      # 命名卷挂载container中的目录\n      - dongle-vo:/etc/nginx\n# 命名卷不存在则用这种方式让docker自行创建      \nvolumes:\n  dongle-vo:\n```\n\n\n\n## bind-mounts\n\n绑定挂载可以在host上任何位置，需要自行维护绑定挂载的目录，使用绑定挂载时，host上的文件内容会被复制到container中。挂载的文件或目录不存在，则创建\n\n### Docker-CLI\n\n```bash\n$ docker run -v ~/dongle:/etc/nginx \n```\n\n`-v`可以用`~`家目录方式或者绝对路径\n\n```bash\n$ docker run --mount type=bind,src=/root/dongle,dst=/etc/nginx/conf.d\n\n```\n\n`--mount`source必须是host上的绝对路径，如果不存在则会报错。俩种方式都可以使用`$(pwd)`表示当前目录\n\n### docker-compose\n\ndocker-compose使用bind-mount方式，则是这样\n\n```yaml\nservices:\n  nginx:\n    image: nginx:alpine\n    container_name: nginx\n    volumes:\n      # 绝对路径挂载\n      - /home/dongle-vo:/etc/nginx/conf.d\n      # 挂载当前目录下的dongle-vo\n      - ./dongle-vo:/etc/nginx/conf.d\n      # 家目录下的dongle-vo\n      - ~/dongle-vo:/etc/nginx/conf.d\n```\n\nDocker绑定挂载卷时，对于不存在的文件或目录，会始终为其创建目录\n\nbind-mount绑定挂载需要注意几点： \n\n| host             | container        | 结果                                   |\n| :--------------- | :--------------- | :------------------------------------- |\n| 文件或目录不存在 | 文件或目录不存在 | 在host和container均创建目录            |\n| **文件**不存在   | 文件存在         | 在host中为其创建一个目录，启动容器报错 |\n| 文件存在         | 文件不存在       | 复制host文件至container中              |\n| 文件存在         | 文件存在         | host文件覆盖container文件              |\n\n挂载host上的空目录，那么container中目录内容会被host覆盖。\n","slug":"docker-volume","published":1,"updated":"2021-05-24T10:03:08.000Z","_id":"cleicvvqn000lm6irbbcra6yy","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>container中数据都是在可写层上，如果container不存在，那么数据也将会不存在。我们一般都需要把数据保存至host上，并且持久保存。Docker提供了几种保持数据的方式</p>\n<p>Docker中的保存数据类型分为四种：</p>\n<ol>\n<li>volumes  （数据卷）</li>\n<li>bind-mounts  （绑定挂载）</li>\n<li>tmpfs （只存在内存中，不会写入文件系统）</li>\n<li>pipes （命名管道。用户host和container之前的通信，通常是在container中运行第三方工具）</li>\n</ol>\n<span id=\"more\"></span>\n\n<h2 id=\"volumes\"><a href=\"#volumes\" class=\"headerlink\" title=\"volumes\"></a>volumes</h2><p>存在host文件系统中，和 <code>bind-mounts</code> 工作方式类似，这种类型是由Docker管理。默认是存在<code>/var/lib/docker/volumes</code>目录下。</p>\n<ul>\n<li><p>可以和多个容器共享数据</p>\n</li>\n<li><p>不会自动删除，即使container被干掉，除非手动删除volume</p>\n</li>\n<li><p>创建volume时，如未指定名称，Docker会为其随机生成名称（称为匿名卷，指定名称称为命名卷）</p>\n</li>\n<li><p>不会增加使用volume的container大小</p>\n</li>\n<li><p>容易备份和迁移数据</p>\n</li>\n</ul>\n<h3 id=\"Docker-CLI\"><a href=\"#Docker-CLI\" class=\"headerlink\" title=\"Docker CLI\"></a>Docker CLI</h3><p>手动显示创建</p>\n<pre><code class=\"bash\">$ docker volume create dongle-vo\n</code></pre>\n<p>使用<code>-v</code>让Docker自行创建</p>\n<pre><code class=\"bash\">$ docker run --name nginx -v dongle-vo1:/etc/nginx/conf.d  nginx:alpine\n</code></pre>\n<p>或者使用<code>--mount</code>创建(推荐，相比<code>-v</code>语义化，明确)</p>\n<pre><code class=\"bash\">$ docker run --name nginx --mount type=volume,source=dongle-vo1,target=/etc/nginx/conf.d  nginx:alpine \n</code></pre>\n<blockquote>\n<p>type值有三种：volume（卷），bind（绑定挂载，也就是bind-mount），tmpfs（内存方式）。 </p>\n<p>source：对于volume是命名卷的名称，而对于bind类型是host上的绝对路径（不存在会报错）可以简写为src</p>\n<p>target：必需，容器路径（绝对路径）可以简写为dst</p>\n<p>其他具体参数请查看<a href=\"https://docs.docker.com/storage/\">官方文档</a></p>\n<p>不显示指定type值，默认是volume。不指定source则按创建匿名卷方式挂载</p>\n</blockquote>\n<p>运行一个Nginx容器，创建一个名称为 <code>dongle-vo1</code> 的命名卷，挂载到container <code>/etc/nginx/conf.d</code>目录中。</p>\n<blockquote>\n<p>如果volume中没有内容，container中有内容。Docker则将container中的内容复制至volume中。这点是不同于<code>bind-mount</code>，<code>bind-mount</code>类型的volume中的内容会覆盖container内容</p>\n</blockquote>\n<p>查看volume列表</p>\n<pre><code class=\"bash\">$ docker volume ls\n\nlocal     dongle-vo1\n</code></pre>\n<p>查看volume</p>\n<pre><code class=\"bash\">$ docker inspect dongle-vo1\n\n[\n    &#123;\n        &quot;Driver&quot;: &quot;local&quot;,\n        &quot;Labels&quot;: null,\n        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/dongle-vo1/_data&quot;,\n        &quot;Name&quot;: &quot;dongle-vo1&quot;,\n        &quot;Options&quot;: null,\n        &quot;Scope&quot;: &quot;local&quot;\n    &#125;\n]\n</code></pre>\n<p>进入挂载点查看挂载的内容</p>\n<pre><code class=\"bash\">$ cd /var/lib/docker/volumes/dongle-vo1/_data\n\ndefault.conf\n</code></pre>\n<h3 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h3><p>那Dockerfile里的VOLUME 是怎么用的?</p>\n<pre><code class=\"shell\"># 这俩个效果是一样的\nVOLUME dongle-vo\nVOLUME [&quot;/dongle-vo&quot;]\n</code></pre>\n<p>VOLUME可以指定多个。Docker会创建匿名卷挂载到container中的<code>dongle-vo</code>目录，也就是说这里指定的目录是container中的，不存在则创建。container目录里有内容会被复制到匿名卷中。相当于 <code>docker run -v dongle-vo </code> 或者  <code>docker run --mount target=/dongle-vo</code></p>\n<p>那我可不可以用VOLUME这个绑定host目录呢？是不可以的，挂载host目录是依赖于host系统的，并不能保证通用性。</p>\n<p>指定host目录或者命名卷可以这样<code>docker run --mount type=volume,source=dongle-vo1,target=/dongle-vo</code>，使用<code>-v</code>也是一样的</p>\n<h3 id=\"docker-compose\"><a href=\"#docker-compose\" class=\"headerlink\" title=\"docker-compose\"></a>docker-compose</h3><p>前者为host目录，后者container目录</p>\n<pre><code class=\"yaml\">services:\n  nginx:\n    image: nginx:alpine\n    container_name: nginx\n    volumes:\n      # 匿名卷方式挂载container中的dongle-vo目录\n      - dongle-vo\n      # 命名卷挂载container中的目录\n      - dongle-vo:/etc/nginx\n# 命名卷不存在则用这种方式让docker自行创建      \nvolumes:\n  dongle-vo:\n</code></pre>\n<h2 id=\"bind-mounts\"><a href=\"#bind-mounts\" class=\"headerlink\" title=\"bind-mounts\"></a>bind-mounts</h2><p>绑定挂载可以在host上任何位置，需要自行维护绑定挂载的目录，使用绑定挂载时，host上的文件内容会被复制到container中。挂载的文件或目录不存在，则创建</p>\n<h3 id=\"Docker-CLI-1\"><a href=\"#Docker-CLI-1\" class=\"headerlink\" title=\"Docker-CLI\"></a>Docker-CLI</h3><pre><code class=\"bash\">$ docker run -v ~/dongle:/etc/nginx \n</code></pre>\n<p><code>-v</code>可以用<code>~</code>家目录方式或者绝对路径</p>\n<pre><code class=\"bash\">$ docker run --mount type=bind,src=/root/dongle,dst=/etc/nginx/conf.d\n</code></pre>\n<p><code>--mount</code>source必须是host上的绝对路径，如果不存在则会报错。俩种方式都可以使用<code>$(pwd)</code>表示当前目录</p>\n<h3 id=\"docker-compose-1\"><a href=\"#docker-compose-1\" class=\"headerlink\" title=\"docker-compose\"></a>docker-compose</h3><p>docker-compose使用bind-mount方式，则是这样</p>\n<pre><code class=\"yaml\">services:\n  nginx:\n    image: nginx:alpine\n    container_name: nginx\n    volumes:\n      # 绝对路径挂载\n      - /home/dongle-vo:/etc/nginx/conf.d\n      # 挂载当前目录下的dongle-vo\n      - ./dongle-vo:/etc/nginx/conf.d\n      # 家目录下的dongle-vo\n      - ~/dongle-vo:/etc/nginx/conf.d\n</code></pre>\n<p>Docker绑定挂载卷时，对于不存在的文件或目录，会始终为其创建目录</p>\n<p>bind-mount绑定挂载需要注意几点： </p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">host</th>\n<th align=\"left\">container</th>\n<th align=\"left\">结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">文件或目录不存在</td>\n<td align=\"left\">文件或目录不存在</td>\n<td align=\"left\">在host和container均创建目录</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>文件</strong>不存在</td>\n<td align=\"left\">文件存在</td>\n<td align=\"left\">在host中为其创建一个目录，启动容器报错</td>\n</tr>\n<tr>\n<td align=\"left\">文件存在</td>\n<td align=\"left\">文件不存在</td>\n<td align=\"left\">复制host文件至container中</td>\n</tr>\n<tr>\n<td align=\"left\">文件存在</td>\n<td align=\"left\">文件存在</td>\n<td align=\"left\">host文件覆盖container文件</td>\n</tr>\n</tbody></table>\n<p>挂载host上的空目录，那么container中目录内容会被host覆盖。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>container中数据都是在可写层上，如果container不存在，那么数据也将会不存在。我们一般都需要把数据保存至host上，并且持久保存。Docker提供了几种保持数据的方式</p>\n<p>Docker中的保存数据类型分为四种：</p>\n<ol>\n<li>volumes  （数据卷）</li>\n<li>bind-mounts  （绑定挂载）</li>\n<li>tmpfs （只存在内存中，不会写入文件系统）</li>\n<li>pipes （命名管道。用户host和container之前的通信，通常是在container中运行第三方工具）</li>\n</ol>","more":"<h2 id=\"volumes\"><a href=\"#volumes\" class=\"headerlink\" title=\"volumes\"></a>volumes</h2><p>存在host文件系统中，和 <code>bind-mounts</code> 工作方式类似，这种类型是由Docker管理。默认是存在<code>/var/lib/docker/volumes</code>目录下。</p>\n<ul>\n<li><p>可以和多个容器共享数据</p>\n</li>\n<li><p>不会自动删除，即使container被干掉，除非手动删除volume</p>\n</li>\n<li><p>创建volume时，如未指定名称，Docker会为其随机生成名称（称为匿名卷，指定名称称为命名卷）</p>\n</li>\n<li><p>不会增加使用volume的container大小</p>\n</li>\n<li><p>容易备份和迁移数据</p>\n</li>\n</ul>\n<h3 id=\"Docker-CLI\"><a href=\"#Docker-CLI\" class=\"headerlink\" title=\"Docker CLI\"></a>Docker CLI</h3><p>手动显示创建</p>\n<pre><code class=\"bash\">$ docker volume create dongle-vo\n</code></pre>\n<p>使用<code>-v</code>让Docker自行创建</p>\n<pre><code class=\"bash\">$ docker run --name nginx -v dongle-vo1:/etc/nginx/conf.d  nginx:alpine\n</code></pre>\n<p>或者使用<code>--mount</code>创建(推荐，相比<code>-v</code>语义化，明确)</p>\n<pre><code class=\"bash\">$ docker run --name nginx --mount type=volume,source=dongle-vo1,target=/etc/nginx/conf.d  nginx:alpine \n</code></pre>\n<blockquote>\n<p>type值有三种：volume（卷），bind（绑定挂载，也就是bind-mount），tmpfs（内存方式）。 </p>\n<p>source：对于volume是命名卷的名称，而对于bind类型是host上的绝对路径（不存在会报错）可以简写为src</p>\n<p>target：必需，容器路径（绝对路径）可以简写为dst</p>\n<p>其他具体参数请查看<a href=\"https://docs.docker.com/storage/\">官方文档</a></p>\n<p>不显示指定type值，默认是volume。不指定source则按创建匿名卷方式挂载</p>\n</blockquote>\n<p>运行一个Nginx容器，创建一个名称为 <code>dongle-vo1</code> 的命名卷，挂载到container <code>/etc/nginx/conf.d</code>目录中。</p>\n<blockquote>\n<p>如果volume中没有内容，container中有内容。Docker则将container中的内容复制至volume中。这点是不同于<code>bind-mount</code>，<code>bind-mount</code>类型的volume中的内容会覆盖container内容</p>\n</blockquote>\n<p>查看volume列表</p>\n<pre><code class=\"bash\">$ docker volume ls\n\nlocal     dongle-vo1\n</code></pre>\n<p>查看volume</p>\n<pre><code class=\"bash\">$ docker inspect dongle-vo1\n\n[\n    &#123;\n        &quot;Driver&quot;: &quot;local&quot;,\n        &quot;Labels&quot;: null,\n        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/dongle-vo1/_data&quot;,\n        &quot;Name&quot;: &quot;dongle-vo1&quot;,\n        &quot;Options&quot;: null,\n        &quot;Scope&quot;: &quot;local&quot;\n    &#125;\n]\n</code></pre>\n<p>进入挂载点查看挂载的内容</p>\n<pre><code class=\"bash\">$ cd /var/lib/docker/volumes/dongle-vo1/_data\n\ndefault.conf\n</code></pre>\n<h3 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h3><p>那Dockerfile里的VOLUME 是怎么用的?</p>\n<pre><code class=\"shell\"># 这俩个效果是一样的\nVOLUME dongle-vo\nVOLUME [&quot;/dongle-vo&quot;]\n</code></pre>\n<p>VOLUME可以指定多个。Docker会创建匿名卷挂载到container中的<code>dongle-vo</code>目录，也就是说这里指定的目录是container中的，不存在则创建。container目录里有内容会被复制到匿名卷中。相当于 <code>docker run -v dongle-vo </code> 或者  <code>docker run --mount target=/dongle-vo</code></p>\n<p>那我可不可以用VOLUME这个绑定host目录呢？是不可以的，挂载host目录是依赖于host系统的，并不能保证通用性。</p>\n<p>指定host目录或者命名卷可以这样<code>docker run --mount type=volume,source=dongle-vo1,target=/dongle-vo</code>，使用<code>-v</code>也是一样的</p>\n<h3 id=\"docker-compose\"><a href=\"#docker-compose\" class=\"headerlink\" title=\"docker-compose\"></a>docker-compose</h3><p>前者为host目录，后者container目录</p>\n<pre><code class=\"yaml\">services:\n  nginx:\n    image: nginx:alpine\n    container_name: nginx\n    volumes:\n      # 匿名卷方式挂载container中的dongle-vo目录\n      - dongle-vo\n      # 命名卷挂载container中的目录\n      - dongle-vo:/etc/nginx\n# 命名卷不存在则用这种方式让docker自行创建      \nvolumes:\n  dongle-vo:\n</code></pre>\n<h2 id=\"bind-mounts\"><a href=\"#bind-mounts\" class=\"headerlink\" title=\"bind-mounts\"></a>bind-mounts</h2><p>绑定挂载可以在host上任何位置，需要自行维护绑定挂载的目录，使用绑定挂载时，host上的文件内容会被复制到container中。挂载的文件或目录不存在，则创建</p>\n<h3 id=\"Docker-CLI-1\"><a href=\"#Docker-CLI-1\" class=\"headerlink\" title=\"Docker-CLI\"></a>Docker-CLI</h3><pre><code class=\"bash\">$ docker run -v ~/dongle:/etc/nginx \n</code></pre>\n<p><code>-v</code>可以用<code>~</code>家目录方式或者绝对路径</p>\n<pre><code class=\"bash\">$ docker run --mount type=bind,src=/root/dongle,dst=/etc/nginx/conf.d\n</code></pre>\n<p><code>--mount</code>source必须是host上的绝对路径，如果不存在则会报错。俩种方式都可以使用<code>$(pwd)</code>表示当前目录</p>\n<h3 id=\"docker-compose-1\"><a href=\"#docker-compose-1\" class=\"headerlink\" title=\"docker-compose\"></a>docker-compose</h3><p>docker-compose使用bind-mount方式，则是这样</p>\n<pre><code class=\"yaml\">services:\n  nginx:\n    image: nginx:alpine\n    container_name: nginx\n    volumes:\n      # 绝对路径挂载\n      - /home/dongle-vo:/etc/nginx/conf.d\n      # 挂载当前目录下的dongle-vo\n      - ./dongle-vo:/etc/nginx/conf.d\n      # 家目录下的dongle-vo\n      - ~/dongle-vo:/etc/nginx/conf.d\n</code></pre>\n<p>Docker绑定挂载卷时，对于不存在的文件或目录，会始终为其创建目录</p>\n<p>bind-mount绑定挂载需要注意几点： </p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">host</th>\n<th align=\"left\">container</th>\n<th align=\"left\">结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">文件或目录不存在</td>\n<td align=\"left\">文件或目录不存在</td>\n<td align=\"left\">在host和container均创建目录</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>文件</strong>不存在</td>\n<td align=\"left\">文件存在</td>\n<td align=\"left\">在host中为其创建一个目录，启动容器报错</td>\n</tr>\n<tr>\n<td align=\"left\">文件存在</td>\n<td align=\"left\">文件不存在</td>\n<td align=\"left\">复制host文件至container中</td>\n</tr>\n<tr>\n<td align=\"left\">文件存在</td>\n<td align=\"left\">文件存在</td>\n<td align=\"left\">host文件覆盖container文件</td>\n</tr>\n</tbody></table>\n<p>挂载host上的空目录，那么container中目录内容会被host覆盖。</p>"},{"title":"利用Docker和Nginx部署Hexo静态页面数据","toc":true,"date":"2021-04-30T12:39:01.000Z","_content":"本文讲的是如何用Docker部署hexo，为啥要用nginx呢？hexo是支持生成静态页面的，\n访问速度上静态页面是快于```hexo s```这种开启服务式的。除了本文实现方式，还有另一种方式。\n用docker部署nginx，挂载nginx静态文件目录（卷），在本地生成hexo静态文件，然后丢到挂载的目录里即可。\n这种方式相对简约点，但是笔者并不想在本地生成文件丢到服务器上，所以在上式中多加了一个hexo容器，在这个容器里生成静态文件（同样也挂载生成的静态文件卷），只需拷贝新增的md文件至服务器卷中\n<!--more-->\n\n首先blog目录结构\n```\nblog\n│  # 这个是主题配置文件，因主题而异\n├─ _config.icarus.yml\n├─ _config.landscape.yml\n├─ _config.yml\n├─ db.json\n├─ docker-compose.yml\n├─ dockerfiles\n│    └─ NodeFile\n├─ package-lock.json\n├─ package.json\n├─ yarn.lock\n├─ node.sh\n│  # md文件\n├─ source\n│  # 主题配置\n└─ themes\n```\n\n## 准备环境\nDocker\ndocker-compose \n\n## 安装Docker\n<a href=\"https://vxdf.icu/docker/docker-install/\" target=\"_blank\">可查看本文</a>\n\n## 配置文件 \nNodeFile 配置如下\n```dockerfile NodeFile\nFROM node:alpine\n# 切换工作目录，后续的操作都会在这个目录执行\nWORKDIR /root/blog\n# 复制blog目录下所有的文件至工作目录\nCOPY . .\n# 因为node镜像自带yarn，这一步设置一下仓库源，安装hexo\nRUN yarn config set registry https://registry.npm.taobao.org \\\n    && yarn global add hexo-cli \\\n    && yarn\n# 赋予可执行权限\nRUN chmod +x node.sh\n# 在 {WORKDIR} 中执行脚本 (是在docker容器里执行)\nENTRYPOINT [\"/bin/sh\"，\"node.sh\"]\n# 声明容器运行时提供服务的端口，实际并不会自动进行映射宿主端口映射。\n# 只是理解该镜像的守护端口，除非在run命令用 -p 绑定映射关系或者 -P 会随机映射宿主端口\nEXPOSE 8080\n# 指定命名卷 （容器中目录）\nVOLUME [\"/root/blog/source\", \"/root/blog/public\"]\n```\n\n```shell node.sh\n# 清除静态页面以及缓存\nhexo clean\n# 生成静态页面\nhexo g\n# 开启hexo 服务\nhexo s\n\n```\n\ndocker-compose.yml 配置\n```yaml  docker-compose.yml \nversion: \"3.9\"\nservices:\n  blog:\n    build: \n      # 镜像构建上下文，也就是 /home/admin/blog 目录\n      context: .\n      # 指定Dockerfile文件\n      dockerfile: dockerfiles/NodeFile\n    # 容器名称  \n    container_name: blog\n    # 镜像名称\n    image: \"blog\"\n    ports:\n      - \"8080:4000\"\n    # 挂载卷 (前者本机目录，后者容器内目录)\n    volumes:\n      # 绑定blog source目录,也就是md文件目录。后续新增的md文件丢到这里\n      - \"/home/admin/blog/source:/root/blog/source\"\n      # 绑定hexo生成静态文件目录，后续用来同步nginx\n      - \"/home/admin/nginx/html:/root/blog/public\"\n  nginx:\n    # 为啥这里不需要Dockerfile文件呢? \n    # 没有Dockerfile的话会先从registry中心pull下来\n    container_name: nginx\n    image: \"nginx:alpine\"\n    ports:\n      - \"443:443\"\n      - \"80:80\"\n    volumes:\n      # nginx配置\n      - \"/home/admin/nginx/conf/nginx.conf:/etc/nginx/nginx.conf\"\n      # 默认nginx server配置\n      - \"/home/admin/nginx/conf.d:/etc/nginx/conf.d\"\n      # nginx静态页面目录     \n      - \"/home/admin/nginx/html:/usr/share/nginx/html\"\n      # 证书位置\n      - \"/home/admin/nginx/ssl/cert:/etc/nginx/ssl/cert\"\n```\n## Nginx配置\n因为nginx.conf和default.conf文件在host上是不存在的，对于挂载host上不存在的文件，docker会在host上为其创建一个目录，并且启动容器报错。容器中的配置会被host覆盖。推荐挂载目录而不是文件，挂载单个文件时，使用vim命令修改并不会实时同步至container中。[具体查看](http://localhost:4000/docker/docker-volume)\n\n我们host上并不存在这些配置文件，先后台启动一个nginx容器, 为了拷贝配置文件\n\n```shell\ndocker run -d --name nginx nginx:alpine \n```\n拷贝配置容器中的default.conf和nginx.conf至host中\n```shell\ndocker cp nginx:/etc/nginx/conf.d /home/admin/nginx/conf.d\n```\n```shell\ndocker cp nginx:/etc/nginx/nginx.conf /home/admin/nginx/conf/nginx.conf \n```\n当然，如果需要配置SSL的话，修改配置default.conf\n```shell /home/admin/nginx/conf.d/default.conf\nserver {\n    # 开启SSl\n    listen 443 ssl;\n    server_name yourdomain.com;\n\n    #charset koi8-r;\n    #access_log  /var/log/nginx/host.access.log  main;\n\n    # 注意，这个是container中的路径。如果不是绝对路径，默认是container中的/etc/nginx目录下\n    ssl_certificate ssl/cert/you.pem;\n    ssl_certificate_key ssl/cert/you.key;\n    ssl_session_timeout 5m;\n    # 加密套件类型\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n    # 使用TLS协议类型\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n    }\n\n    error_page  404              404.html;\n\n    # redirect server error pages to the static page /50x.html\n    #\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n\n    # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n    #\n    #location ~ \\.php$ {\n    #    proxy_pass   http://127.0.0.1;\n    #}\n\n    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n    #\n    #location ~ \\.php$ {\n    #    root           html;\n    #    fastcgi_pass   127.0.0.1:9000;\n    #    fastcgi_index  index.php;\n    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n    #    include        fastcgi_params;\n    #}\n\n    # deny access to .htaccess files, if Apache's document root\n    # concurs with nginx's one\n    #\n    #location ~ /\\.ht {\n    #    deny  all;\n    #}\n}\n# HTTP强制重定向HTTPS\nserver {\n   listen 80;\n    server_name yourdomain.com; #需要将yourdomain.com替换成证书绑定的域名。\n    rewrite ^(.*)$ https://$host$1; #将所有HTTP请求通过rewrite指令重定向到HTTPS。\n    location / {\n        index index.html index.htm;\n    }\n}\n```\n\n\n## 开始部署\n将blog目录下的文件拷贝至服务器上的```/home/admin/blog```下\n执行命令 ``dokcer-compose up -d`` 后台启动并运行所有的容器。\n\n## 后续使用\n\n服务启动好了，那我怎么更新文章呢？只需把需要更新的文章（md文件），拷贝至服务器`/home/admin/blog/source`下。\n\n然后执行 `docker exec -it blog hexo g` 生成静态文件\n\n\n\n","source":"_posts/nginx-hexo-config.md","raw":"---\ntitle: 利用Docker和Nginx部署Hexo静态页面数据\ntoc: true \ndate: 2021/04/30 20:39:01\ncategories:\n- docker\n---\n本文讲的是如何用Docker部署hexo，为啥要用nginx呢？hexo是支持生成静态页面的，\n访问速度上静态页面是快于```hexo s```这种开启服务式的。除了本文实现方式，还有另一种方式。\n用docker部署nginx，挂载nginx静态文件目录（卷），在本地生成hexo静态文件，然后丢到挂载的目录里即可。\n这种方式相对简约点，但是笔者并不想在本地生成文件丢到服务器上，所以在上式中多加了一个hexo容器，在这个容器里生成静态文件（同样也挂载生成的静态文件卷），只需拷贝新增的md文件至服务器卷中\n<!--more-->\n\n首先blog目录结构\n```\nblog\n│  # 这个是主题配置文件，因主题而异\n├─ _config.icarus.yml\n├─ _config.landscape.yml\n├─ _config.yml\n├─ db.json\n├─ docker-compose.yml\n├─ dockerfiles\n│    └─ NodeFile\n├─ package-lock.json\n├─ package.json\n├─ yarn.lock\n├─ node.sh\n│  # md文件\n├─ source\n│  # 主题配置\n└─ themes\n```\n\n## 准备环境\nDocker\ndocker-compose \n\n## 安装Docker\n<a href=\"https://vxdf.icu/docker/docker-install/\" target=\"_blank\">可查看本文</a>\n\n## 配置文件 \nNodeFile 配置如下\n```dockerfile NodeFile\nFROM node:alpine\n# 切换工作目录，后续的操作都会在这个目录执行\nWORKDIR /root/blog\n# 复制blog目录下所有的文件至工作目录\nCOPY . .\n# 因为node镜像自带yarn，这一步设置一下仓库源，安装hexo\nRUN yarn config set registry https://registry.npm.taobao.org \\\n    && yarn global add hexo-cli \\\n    && yarn\n# 赋予可执行权限\nRUN chmod +x node.sh\n# 在 {WORKDIR} 中执行脚本 (是在docker容器里执行)\nENTRYPOINT [\"/bin/sh\"，\"node.sh\"]\n# 声明容器运行时提供服务的端口，实际并不会自动进行映射宿主端口映射。\n# 只是理解该镜像的守护端口，除非在run命令用 -p 绑定映射关系或者 -P 会随机映射宿主端口\nEXPOSE 8080\n# 指定命名卷 （容器中目录）\nVOLUME [\"/root/blog/source\", \"/root/blog/public\"]\n```\n\n```shell node.sh\n# 清除静态页面以及缓存\nhexo clean\n# 生成静态页面\nhexo g\n# 开启hexo 服务\nhexo s\n\n```\n\ndocker-compose.yml 配置\n```yaml  docker-compose.yml \nversion: \"3.9\"\nservices:\n  blog:\n    build: \n      # 镜像构建上下文，也就是 /home/admin/blog 目录\n      context: .\n      # 指定Dockerfile文件\n      dockerfile: dockerfiles/NodeFile\n    # 容器名称  \n    container_name: blog\n    # 镜像名称\n    image: \"blog\"\n    ports:\n      - \"8080:4000\"\n    # 挂载卷 (前者本机目录，后者容器内目录)\n    volumes:\n      # 绑定blog source目录,也就是md文件目录。后续新增的md文件丢到这里\n      - \"/home/admin/blog/source:/root/blog/source\"\n      # 绑定hexo生成静态文件目录，后续用来同步nginx\n      - \"/home/admin/nginx/html:/root/blog/public\"\n  nginx:\n    # 为啥这里不需要Dockerfile文件呢? \n    # 没有Dockerfile的话会先从registry中心pull下来\n    container_name: nginx\n    image: \"nginx:alpine\"\n    ports:\n      - \"443:443\"\n      - \"80:80\"\n    volumes:\n      # nginx配置\n      - \"/home/admin/nginx/conf/nginx.conf:/etc/nginx/nginx.conf\"\n      # 默认nginx server配置\n      - \"/home/admin/nginx/conf.d:/etc/nginx/conf.d\"\n      # nginx静态页面目录     \n      - \"/home/admin/nginx/html:/usr/share/nginx/html\"\n      # 证书位置\n      - \"/home/admin/nginx/ssl/cert:/etc/nginx/ssl/cert\"\n```\n## Nginx配置\n因为nginx.conf和default.conf文件在host上是不存在的，对于挂载host上不存在的文件，docker会在host上为其创建一个目录，并且启动容器报错。容器中的配置会被host覆盖。推荐挂载目录而不是文件，挂载单个文件时，使用vim命令修改并不会实时同步至container中。[具体查看](http://localhost:4000/docker/docker-volume)\n\n我们host上并不存在这些配置文件，先后台启动一个nginx容器, 为了拷贝配置文件\n\n```shell\ndocker run -d --name nginx nginx:alpine \n```\n拷贝配置容器中的default.conf和nginx.conf至host中\n```shell\ndocker cp nginx:/etc/nginx/conf.d /home/admin/nginx/conf.d\n```\n```shell\ndocker cp nginx:/etc/nginx/nginx.conf /home/admin/nginx/conf/nginx.conf \n```\n当然，如果需要配置SSL的话，修改配置default.conf\n```shell /home/admin/nginx/conf.d/default.conf\nserver {\n    # 开启SSl\n    listen 443 ssl;\n    server_name yourdomain.com;\n\n    #charset koi8-r;\n    #access_log  /var/log/nginx/host.access.log  main;\n\n    # 注意，这个是container中的路径。如果不是绝对路径，默认是container中的/etc/nginx目录下\n    ssl_certificate ssl/cert/you.pem;\n    ssl_certificate_key ssl/cert/you.key;\n    ssl_session_timeout 5m;\n    # 加密套件类型\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n    # 使用TLS协议类型\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n    }\n\n    error_page  404              404.html;\n\n    # redirect server error pages to the static page /50x.html\n    #\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n\n    # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n    #\n    #location ~ \\.php$ {\n    #    proxy_pass   http://127.0.0.1;\n    #}\n\n    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n    #\n    #location ~ \\.php$ {\n    #    root           html;\n    #    fastcgi_pass   127.0.0.1:9000;\n    #    fastcgi_index  index.php;\n    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n    #    include        fastcgi_params;\n    #}\n\n    # deny access to .htaccess files, if Apache's document root\n    # concurs with nginx's one\n    #\n    #location ~ /\\.ht {\n    #    deny  all;\n    #}\n}\n# HTTP强制重定向HTTPS\nserver {\n   listen 80;\n    server_name yourdomain.com; #需要将yourdomain.com替换成证书绑定的域名。\n    rewrite ^(.*)$ https://$host$1; #将所有HTTP请求通过rewrite指令重定向到HTTPS。\n    location / {\n        index index.html index.htm;\n    }\n}\n```\n\n\n## 开始部署\n将blog目录下的文件拷贝至服务器上的```/home/admin/blog```下\n执行命令 ``dokcer-compose up -d`` 后台启动并运行所有的容器。\n\n## 后续使用\n\n服务启动好了，那我怎么更新文章呢？只需把需要更新的文章（md文件），拷贝至服务器`/home/admin/blog/source`下。\n\n然后执行 `docker exec -it blog hexo g` 生成静态文件\n\n\n\n","slug":"nginx-hexo-config","published":1,"updated":"2021-05-25T03:27:44.000Z","_id":"cleicvvqp000nm6irgspe72r4","comments":1,"layout":"post","photos":[],"link":"","content":"<p>本文讲的是如何用Docker部署hexo，为啥要用nginx呢？hexo是支持生成静态页面的，<br>访问速度上静态页面是快于<code>hexo s</code>这种开启服务式的。除了本文实现方式，还有另一种方式。<br>用docker部署nginx，挂载nginx静态文件目录（卷），在本地生成hexo静态文件，然后丢到挂载的目录里即可。<br>这种方式相对简约点，但是笔者并不想在本地生成文件丢到服务器上，所以在上式中多加了一个hexo容器，在这个容器里生成静态文件（同样也挂载生成的静态文件卷），只需拷贝新增的md文件至服务器卷中</p>\n<span id=\"more\"></span>\n\n<p>首先blog目录结构</p>\n<pre><code>blog\n│  # 这个是主题配置文件，因主题而异\n├─ _config.icarus.yml\n├─ _config.landscape.yml\n├─ _config.yml\n├─ db.json\n├─ docker-compose.yml\n├─ dockerfiles\n│    └─ NodeFile\n├─ package-lock.json\n├─ package.json\n├─ yarn.lock\n├─ node.sh\n│  # md文件\n├─ source\n│  # 主题配置\n└─ themes\n</code></pre>\n<h2 id=\"准备环境\"><a href=\"#准备环境\" class=\"headerlink\" title=\"准备环境\"></a>准备环境</h2><p>Docker<br>docker-compose </p>\n<h2 id=\"安装Docker\"><a href=\"#安装Docker\" class=\"headerlink\" title=\"安装Docker\"></a>安装Docker</h2><p><a href=\"https://vxdf.icu/docker/docker-install/\" target=\"_blank\">可查看本文</a></p>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p>NodeFile 配置如下</p>\n<pre><code class=\"dockerfile\">FROM node:alpine\n# 切换工作目录，后续的操作都会在这个目录执行\nWORKDIR /root/blog\n# 复制blog目录下所有的文件至工作目录\nCOPY . .\n# 因为node镜像自带yarn，这一步设置一下仓库源，安装hexo\nRUN yarn config set registry https://registry.npm.taobao.org \\\n    &amp;&amp; yarn global add hexo-cli \\\n    &amp;&amp; yarn\n# 赋予可执行权限\nRUN chmod +x node.sh\n# 在 &#123;WORKDIR&#125; 中执行脚本 (是在docker容器里执行)\nENTRYPOINT [&quot;/bin/sh&quot;，&quot;node.sh&quot;]\n# 声明容器运行时提供服务的端口，实际并不会自动进行映射宿主端口映射。\n# 只是理解该镜像的守护端口，除非在run命令用 -p 绑定映射关系或者 -P 会随机映射宿主端口\nEXPOSE 8080\n# 指定命名卷 （容器中目录）\nVOLUME [&quot;/root/blog/source&quot;, &quot;/root/blog/public&quot;]\n</code></pre>\n<pre><code class=\"shell\"># 清除静态页面以及缓存\nhexo clean\n# 生成静态页面\nhexo g\n# 开启hexo 服务\nhexo s\n</code></pre>\n<p>docker-compose.yml 配置</p>\n<pre><code class=\"yaml\">version: &quot;3.9&quot;\nservices:\n  blog:\n    build: \n      # 镜像构建上下文，也就是 /home/admin/blog 目录\n      context: .\n      # 指定Dockerfile文件\n      dockerfile: dockerfiles/NodeFile\n    # 容器名称  \n    container_name: blog\n    # 镜像名称\n    image: &quot;blog&quot;\n    ports:\n      - &quot;8080:4000&quot;\n    # 挂载卷 (前者本机目录，后者容器内目录)\n    volumes:\n      # 绑定blog source目录,也就是md文件目录。后续新增的md文件丢到这里\n      - &quot;/home/admin/blog/source:/root/blog/source&quot;\n      # 绑定hexo生成静态文件目录，后续用来同步nginx\n      - &quot;/home/admin/nginx/html:/root/blog/public&quot;\n  nginx:\n    # 为啥这里不需要Dockerfile文件呢? \n    # 没有Dockerfile的话会先从registry中心pull下来\n    container_name: nginx\n    image: &quot;nginx:alpine&quot;\n    ports:\n      - &quot;443:443&quot;\n      - &quot;80:80&quot;\n    volumes:\n      # nginx配置\n      - &quot;/home/admin/nginx/conf/nginx.conf:/etc/nginx/nginx.conf&quot;\n      # 默认nginx server配置\n      - &quot;/home/admin/nginx/conf.d:/etc/nginx/conf.d&quot;\n      # nginx静态页面目录     \n      - &quot;/home/admin/nginx/html:/usr/share/nginx/html&quot;\n      # 证书位置\n      - &quot;/home/admin/nginx/ssl/cert:/etc/nginx/ssl/cert&quot;\n</code></pre>\n<h2 id=\"Nginx配置\"><a href=\"#Nginx配置\" class=\"headerlink\" title=\"Nginx配置\"></a>Nginx配置</h2><p>因为nginx.conf和default.conf文件在host上是不存在的，对于挂载host上不存在的文件，docker会在host上为其创建一个目录，并且启动容器报错。容器中的配置会被host覆盖。推荐挂载目录而不是文件，挂载单个文件时，使用vim命令修改并不会实时同步至container中。<a href=\"http://localhost:4000/docker/docker-volume\">具体查看</a></p>\n<p>我们host上并不存在这些配置文件，先后台启动一个nginx容器, 为了拷贝配置文件</p>\n<pre><code class=\"shell\">docker run -d --name nginx nginx:alpine \n</code></pre>\n<p>拷贝配置容器中的default.conf和nginx.conf至host中</p>\n<pre><code class=\"shell\">docker cp nginx:/etc/nginx/conf.d /home/admin/nginx/conf.d\n</code></pre>\n<pre><code class=\"shell\">docker cp nginx:/etc/nginx/nginx.conf /home/admin/nginx/conf/nginx.conf \n</code></pre>\n<p>当然，如果需要配置SSL的话，修改配置default.conf</p>\n<pre><code class=\"shell\">server &#123;\n    # 开启SSl\n    listen 443 ssl;\n    server_name yourdomain.com;\n\n    #charset koi8-r;\n    #access_log  /var/log/nginx/host.access.log  main;\n\n    # 注意，这个是container中的路径。如果不是绝对路径，默认是container中的/etc/nginx目录下\n    ssl_certificate ssl/cert/you.pem;\n    ssl_certificate_key ssl/cert/you.key;\n    ssl_session_timeout 5m;\n    # 加密套件类型\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n    # 使用TLS协议类型\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;\n    location / &#123;\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n    &#125;\n\n    error_page  404              404.html;\n\n    # redirect server error pages to the static page /50x.html\n    #\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html &#123;\n        root   /usr/share/nginx/html;\n    &#125;\n\n    # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n    #\n    #location ~ \\.php$ &#123;\n    #    proxy_pass   http://127.0.0.1;\n    #&#125;\n\n    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n    #\n    #location ~ \\.php$ &#123;\n    #    root           html;\n    #    fastcgi_pass   127.0.0.1:9000;\n    #    fastcgi_index  index.php;\n    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n    #    include        fastcgi_params;\n    #&#125;\n\n    # deny access to .htaccess files, if Apache&#39;s document root\n    # concurs with nginx&#39;s one\n    #\n    #location ~ /\\.ht &#123;\n    #    deny  all;\n    #&#125;\n&#125;\n# HTTP强制重定向HTTPS\nserver &#123;\n   listen 80;\n    server_name yourdomain.com; #需要将yourdomain.com替换成证书绑定的域名。\n    rewrite ^(.*)$ https://$host$1; #将所有HTTP请求通过rewrite指令重定向到HTTPS。\n    location / &#123;\n        index index.html index.htm;\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"开始部署\"><a href=\"#开始部署\" class=\"headerlink\" title=\"开始部署\"></a>开始部署</h2><p>将blog目录下的文件拷贝至服务器上的<code>/home/admin/blog</code>下<br>执行命令 <code>dokcer-compose up -d</code> 后台启动并运行所有的容器。</p>\n<h2 id=\"后续使用\"><a href=\"#后续使用\" class=\"headerlink\" title=\"后续使用\"></a>后续使用</h2><p>服务启动好了，那我怎么更新文章呢？只需把需要更新的文章（md文件），拷贝至服务器<code>/home/admin/blog/source</code>下。</p>\n<p>然后执行 <code>docker exec -it blog hexo g</code> 生成静态文件</p>\n","site":{"data":{}},"excerpt":"<p>本文讲的是如何用Docker部署hexo，为啥要用nginx呢？hexo是支持生成静态页面的，<br>访问速度上静态页面是快于<code>hexo s</code>这种开启服务式的。除了本文实现方式，还有另一种方式。<br>用docker部署nginx，挂载nginx静态文件目录（卷），在本地生成hexo静态文件，然后丢到挂载的目录里即可。<br>这种方式相对简约点，但是笔者并不想在本地生成文件丢到服务器上，所以在上式中多加了一个hexo容器，在这个容器里生成静态文件（同样也挂载生成的静态文件卷），只需拷贝新增的md文件至服务器卷中</p>","more":"<p>首先blog目录结构</p>\n<pre><code>blog\n│  # 这个是主题配置文件，因主题而异\n├─ _config.icarus.yml\n├─ _config.landscape.yml\n├─ _config.yml\n├─ db.json\n├─ docker-compose.yml\n├─ dockerfiles\n│    └─ NodeFile\n├─ package-lock.json\n├─ package.json\n├─ yarn.lock\n├─ node.sh\n│  # md文件\n├─ source\n│  # 主题配置\n└─ themes\n</code></pre>\n<h2 id=\"准备环境\"><a href=\"#准备环境\" class=\"headerlink\" title=\"准备环境\"></a>准备环境</h2><p>Docker<br>docker-compose </p>\n<h2 id=\"安装Docker\"><a href=\"#安装Docker\" class=\"headerlink\" title=\"安装Docker\"></a>安装Docker</h2><p><a href=\"https://vxdf.icu/docker/docker-install/\" target=\"_blank\">可查看本文</a></p>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p>NodeFile 配置如下</p>\n<pre><code class=\"dockerfile\">FROM node:alpine\n# 切换工作目录，后续的操作都会在这个目录执行\nWORKDIR /root/blog\n# 复制blog目录下所有的文件至工作目录\nCOPY . .\n# 因为node镜像自带yarn，这一步设置一下仓库源，安装hexo\nRUN yarn config set registry https://registry.npm.taobao.org \\\n    &amp;&amp; yarn global add hexo-cli \\\n    &amp;&amp; yarn\n# 赋予可执行权限\nRUN chmod +x node.sh\n# 在 &#123;WORKDIR&#125; 中执行脚本 (是在docker容器里执行)\nENTRYPOINT [&quot;/bin/sh&quot;，&quot;node.sh&quot;]\n# 声明容器运行时提供服务的端口，实际并不会自动进行映射宿主端口映射。\n# 只是理解该镜像的守护端口，除非在run命令用 -p 绑定映射关系或者 -P 会随机映射宿主端口\nEXPOSE 8080\n# 指定命名卷 （容器中目录）\nVOLUME [&quot;/root/blog/source&quot;, &quot;/root/blog/public&quot;]\n</code></pre>\n<pre><code class=\"shell\"># 清除静态页面以及缓存\nhexo clean\n# 生成静态页面\nhexo g\n# 开启hexo 服务\nhexo s\n</code></pre>\n<p>docker-compose.yml 配置</p>\n<pre><code class=\"yaml\">version: &quot;3.9&quot;\nservices:\n  blog:\n    build: \n      # 镜像构建上下文，也就是 /home/admin/blog 目录\n      context: .\n      # 指定Dockerfile文件\n      dockerfile: dockerfiles/NodeFile\n    # 容器名称  \n    container_name: blog\n    # 镜像名称\n    image: &quot;blog&quot;\n    ports:\n      - &quot;8080:4000&quot;\n    # 挂载卷 (前者本机目录，后者容器内目录)\n    volumes:\n      # 绑定blog source目录,也就是md文件目录。后续新增的md文件丢到这里\n      - &quot;/home/admin/blog/source:/root/blog/source&quot;\n      # 绑定hexo生成静态文件目录，后续用来同步nginx\n      - &quot;/home/admin/nginx/html:/root/blog/public&quot;\n  nginx:\n    # 为啥这里不需要Dockerfile文件呢? \n    # 没有Dockerfile的话会先从registry中心pull下来\n    container_name: nginx\n    image: &quot;nginx:alpine&quot;\n    ports:\n      - &quot;443:443&quot;\n      - &quot;80:80&quot;\n    volumes:\n      # nginx配置\n      - &quot;/home/admin/nginx/conf/nginx.conf:/etc/nginx/nginx.conf&quot;\n      # 默认nginx server配置\n      - &quot;/home/admin/nginx/conf.d:/etc/nginx/conf.d&quot;\n      # nginx静态页面目录     \n      - &quot;/home/admin/nginx/html:/usr/share/nginx/html&quot;\n      # 证书位置\n      - &quot;/home/admin/nginx/ssl/cert:/etc/nginx/ssl/cert&quot;\n</code></pre>\n<h2 id=\"Nginx配置\"><a href=\"#Nginx配置\" class=\"headerlink\" title=\"Nginx配置\"></a>Nginx配置</h2><p>因为nginx.conf和default.conf文件在host上是不存在的，对于挂载host上不存在的文件，docker会在host上为其创建一个目录，并且启动容器报错。容器中的配置会被host覆盖。推荐挂载目录而不是文件，挂载单个文件时，使用vim命令修改并不会实时同步至container中。<a href=\"http://localhost:4000/docker/docker-volume\">具体查看</a></p>\n<p>我们host上并不存在这些配置文件，先后台启动一个nginx容器, 为了拷贝配置文件</p>\n<pre><code class=\"shell\">docker run -d --name nginx nginx:alpine \n</code></pre>\n<p>拷贝配置容器中的default.conf和nginx.conf至host中</p>\n<pre><code class=\"shell\">docker cp nginx:/etc/nginx/conf.d /home/admin/nginx/conf.d\n</code></pre>\n<pre><code class=\"shell\">docker cp nginx:/etc/nginx/nginx.conf /home/admin/nginx/conf/nginx.conf \n</code></pre>\n<p>当然，如果需要配置SSL的话，修改配置default.conf</p>\n<pre><code class=\"shell\">server &#123;\n    # 开启SSl\n    listen 443 ssl;\n    server_name yourdomain.com;\n\n    #charset koi8-r;\n    #access_log  /var/log/nginx/host.access.log  main;\n\n    # 注意，这个是container中的路径。如果不是绝对路径，默认是container中的/etc/nginx目录下\n    ssl_certificate ssl/cert/you.pem;\n    ssl_certificate_key ssl/cert/you.key;\n    ssl_session_timeout 5m;\n    # 加密套件类型\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n    # 使用TLS协议类型\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;\n    location / &#123;\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n    &#125;\n\n    error_page  404              404.html;\n\n    # redirect server error pages to the static page /50x.html\n    #\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html &#123;\n        root   /usr/share/nginx/html;\n    &#125;\n\n    # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n    #\n    #location ~ \\.php$ &#123;\n    #    proxy_pass   http://127.0.0.1;\n    #&#125;\n\n    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n    #\n    #location ~ \\.php$ &#123;\n    #    root           html;\n    #    fastcgi_pass   127.0.0.1:9000;\n    #    fastcgi_index  index.php;\n    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n    #    include        fastcgi_params;\n    #&#125;\n\n    # deny access to .htaccess files, if Apache&#39;s document root\n    # concurs with nginx&#39;s one\n    #\n    #location ~ /\\.ht &#123;\n    #    deny  all;\n    #&#125;\n&#125;\n# HTTP强制重定向HTTPS\nserver &#123;\n   listen 80;\n    server_name yourdomain.com; #需要将yourdomain.com替换成证书绑定的域名。\n    rewrite ^(.*)$ https://$host$1; #将所有HTTP请求通过rewrite指令重定向到HTTPS。\n    location / &#123;\n        index index.html index.htm;\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"开始部署\"><a href=\"#开始部署\" class=\"headerlink\" title=\"开始部署\"></a>开始部署</h2><p>将blog目录下的文件拷贝至服务器上的<code>/home/admin/blog</code>下<br>执行命令 <code>dokcer-compose up -d</code> 后台启动并运行所有的容器。</p>\n<h2 id=\"后续使用\"><a href=\"#后续使用\" class=\"headerlink\" title=\"后续使用\"></a>后续使用</h2><p>服务启动好了，那我怎么更新文章呢？只需把需要更新的文章（md文件），拷贝至服务器<code>/home/admin/blog/source</code>下。</p>\n<p>然后执行 <code>docker exec -it blog hexo g</code> 生成静态文件</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cleiahb390000k7ir9wm272vp","category_id":"cleicrb0z0004m6ir3r148xzh","_id":"cleictkgw000gm6irhj7meje4"},{"post_id":"cleicvvqk000im6ir6znrf7is","category_id":"cleicvvql000jm6ir099ngqyw","_id":"cleicvvqm000km6ir8tmibc4c"},{"post_id":"cleicvvqn000lm6irbbcra6yy","category_id":"cleicvvql000jm6ir099ngqyw","_id":"cleicvvqn000mm6irh3lz8pir"},{"post_id":"cleicvvqp000nm6irgspe72r4","category_id":"cleicvvql000jm6ir099ngqyw","_id":"cleicvvqp000om6ire9m37f1k"}],"PostTag":[{"post_id":"cleiahb390000k7ir9wm272vp","tag_id":"cleicrb100005m6irhrlvdb4a","_id":"cleicrb12000am6ir03vxdg9e"},{"post_id":"cleiahb390000k7ir9wm272vp","tag_id":"cleicrb110006m6ir19t63f2r","_id":"cleicrb12000bm6ir173s2v81"},{"post_id":"cleiahb390000k7ir9wm272vp","tag_id":"cleicrb110008m6ir2i8vhux2","_id":"cleicrb12000cm6ir057bcl40"},{"post_id":"cleiahb390000k7ir9wm272vp","tag_id":"cleicrb120009m6ir9ujh2rtx","_id":"cleicrb13000dm6irat1s7a8n"}],"Tag":[{"name":"Hexo","_id":"cleicrb100005m6irhrlvdb4a"},{"name":"Quiet","_id":"cleicrb110006m6ir19t63f2r"},{"name":"主题","_id":"cleicrb110008m6ir2i8vhux2"},{"name":"静态主题","_id":"cleicrb120009m6ir9ujh2rtx"}]}}